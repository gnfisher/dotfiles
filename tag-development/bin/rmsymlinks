#!/bin/bash

# Function to print usage
print_usage() {
    echo "Usage: $0 [-d] [-r] [directory]"
    echo "  -d: Delete dead symlinks instead of just listing them"
    echo "  -r: Recursively process subdirectories"
    echo "  If no directory is specified, the current directory will be used."
}

# Initialize variables
delete_mode=false
recursive_mode=false
search_dir="."

# Parse command line arguments
while getopts ":dr" opt; do
    case ${opt} in
        d )
            delete_mode=true
            ;;
        r )
            recursive_mode=true
            ;;
        \? )
            echo "Invalid option: $OPTARG" 1>&2
            print_usage
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

# Check if a directory was provided as an argument
if [ $# -eq 1 ]; then
    if [ ! -d "$1" ]; then
        echo "Error: '$1' is not a valid directory." 1>&2
        print_usage
        exit 1
    fi
    search_dir="$1"
fi

# Check if we have permission to read the directory
if [ ! -r "$search_dir" ]; then
    echo "Error: No permission to read directory '$search_dir'" 1>&2
    exit 1
fi

# Function to process dead symlinks
process_dead_symlinks() {
    local maxdepth_arg=""
    if [ "$recursive_mode" = false ]; then
        maxdepth_arg="-maxdepth 1"
    fi

    if [ "$delete_mode" = true ]; then
        # Using -exec rm within find for deletion
        find "$search_dir" $maxdepth_arg -type l -exec sh -c 'for l; do [ -e "$l" ] || { rm "$l" && echo "$l"; }; done' _ {} + 2>/dev/null
    else
        # Using -exec with + to batch process symlinks
        find "$search_dir" $maxdepth_arg -type l -exec sh -c 'for l; do [ -e "$l" ] || echo "$l"; done' _ {} + 2>/dev/null
    fi
}

# Process dead symlinks
result=$(process_dead_symlinks)

# Check if any dead symlinks were found
if [ -z "$result" ]; then
    echo "No dead symlinks found in $search_dir"
else
    if [ "$delete_mode" = true ]; then
        echo "Deleted the following dead symlinks:"
    else
        echo "Found the following dead symlinks:"
    fi
    echo "$result"
fi
